<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">


    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.mysql.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.mysql.url}"/>
        <property name="user" value="${jdbc.mysql.username}"/>
        <property name="password" value="${jdbc.mysql.password}"/>
        <property name="minPoolSize" value="${jdbc.minIdle}"/>
        <property name="maxPoolSize" value="${jdbc.maxActive}"/>
        <property name="initialPoolSize" value="${jdbc.initialSize}"/>
        <property name="maxIdleTime" value="${jdbc.maxWait}"/>
        <property name="acquireIncrement" value="5"/>
        <property name="maxStatements" value="0"/>
        <property name="idleConnectionTestPeriod" value="60"/>
        <property name="acquireRetryAttempts" value="30"/>
        <property name="breakAfterAcquireFailure" value="false"/>
    </bean>

    <!-- 事务处理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!--配置事物级别-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
               PROPAGATION_REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
        　　PROPAGATION_SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。
        　　PROPAGATION_MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。
        　　PROPAGATION_REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。
        　　PROPAGATION_NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
        　　PROPAGATION_NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。
        　　PROPAGATION_NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。
            -->

            <!-- 查询相关sql 事物设置只读-->
            <tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED"/>

            <!--增删改-->
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="motify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--切面bean-->
    <bean id="testAspect" class="com.test.apsect.TestAspect"></bean>

    <!--声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面-->
    <!--<aop:aspectj-autoproxy expose-proxy="true"/>
    <aop:config>
             &lt;!&ndash;定义通知&ndash;&gt;
             <aop:advisor advice-ref="txAdvice"  pointcut="execution(public * com.test.service.*Service.*(..))" order="2"/>
             &lt;!&ndash;定义切面&ndash;&gt;
            <aop:aspect ref="testAspect" order="1">
                  &lt;!&ndash;切入点&ndash;&gt;
                <aop:pointcut id="testPoint" expression="execution(public * com.test.service.*Service.*(..))"/>
                <aop:around pointcut-ref="testPoint" method="processed"/>
            </aop:aspect>
    </aop:config>-->
</beans>
